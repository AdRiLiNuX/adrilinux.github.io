<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>virtualisation on AdRiLiNuX's web site</title><link>https://www.reslinger.net/categories/virtualisation/</link><description>Recent content in virtualisation on AdRiLiNuX's web site</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><lastBuildDate>Fri, 21 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.reslinger.net/categories/virtualisation/index.xml" rel="self" type="application/rss+xml"/><item><title>Mode rescue OVH</title><link>https://www.reslinger.net/2020/08/mode-rescue-ovh/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://www.reslinger.net/2020/08/mode-rescue-ovh/</guid><description>&lt;p>Pour des raisons de coût; mon infra repose sur de petits serveurs dédiés à prix promotionnel. J&amp;rsquo;en ai actuellement un chez SoYouStart, mais ce qui suis est également valable pour des serveurs dédiés chez OVH (ainsi que Kimsufi).
Une des particularités des serveurs dédiés pas cher, c&amp;rsquo;est qu&amp;rsquo;il n&amp;rsquo;y a pas systématiquement de carte d&amp;rsquo;accès à distance type Ilo ou Drac. Chez OVH, nous avons un système de rescue qui peut nous aider lorsque le serveur à un sérieux problème.&lt;/p>
&lt;p>Lors d&amp;rsquo;un simple reboot, j&amp;rsquo;ai perdu la main sur mon serveur, j&amp;rsquo;ai donc lancer le mode rescue.
Une fois ce mode démarrer, on peut se connecter sur un système temporaire basé sur Debian en SSH pour essayer de comprendre ce qui ne va pas.
Petite parenthèse, un service web tourne sur le port 81 du système et permet de faire quelques test matériel. Les identifiants sont les même qu&amp;rsquo;avec SSH (utilisateur root, mot de passe reçu par mail).&lt;/p>
&lt;p>Le billet du jour à pour propos de traiter la collecte d&amp;rsquo;informations pour le déboguage de la séquence de boot.&lt;/p>
&lt;p>Mon système fonctionnait parfaitement avant que je le relance, le problème est lié à la séquence de boot et non à une panne matériel. Depuis la console SSH du mode rescue, j&amp;rsquo;installe donc le nécessaire pour voir la séquence de boot. Le nécessaire est la virtualisation. C&amp;rsquo;est parti.&lt;/p>
&lt;p>Par habitude, je commence par mettre le système à jour&lt;/p>
&lt;pre>&lt;code>apt update; apt upgrade -y
&lt;/code>&lt;/pre>
&lt;p>Je désactive le RAID disque de mes disques pour évité d&amp;rsquo;avoir 2 systèmes qui accèdent aux mêmes données&lt;/p>
&lt;pre>&lt;code>mdadm --manage --stop /dev/md127
&lt;/code>&lt;/pre>
&lt;p>Ensuite j&amp;rsquo;installe le nécessaire pour lancer mon système dans une machine virtuelle&lt;/p>
&lt;pre>&lt;code>apt install qemu-kvm libvirt-bin ovmf virtinst -y
&lt;/code>&lt;/pre>
&lt;p>Et je lance la virtualisation de mon système&lt;/p>
&lt;pre>&lt;code>systemctl start libvirtd
virsh net-start default
virt-install --name rescue --hvm --vcpus=4 --ram 8192 --machine q35 --disk path=/dev/sda,bus=virtio,format=raw --disk path=/dev/sdb,bus=virtio,format=raw --disk path=/dev/sdc,bus=virtio,format=raw --disk path=/dev/sdd,bus=virtio,format=raw --network network:default,model=virtio --graphics spice --video qxl --channel spicevmc --rng /dev/random --noautoconsole --console pty,target_type=serial --os-type=linux --os-variant=rhel7 --import
&lt;/code>&lt;/pre>
&lt;p>Si la configuration de votre grub permet le contrôle depuis le port série, vous pouvez y accéder directement &lt;a href="https://www.reslinger.net/2014/12/console-virsh/">depuis la console&lt;/a>. Autrement, installez les paquets suivant&lt;/p>
&lt;pre>&lt;code>apt install virt-manager xauth
&lt;/code>&lt;/pre>
&lt;p>Après vous être reloggué, vous pourrez lancer virt-manager et avoir accès à la console et voir enfin pourquoi votre système ne démarre plus.&lt;/p></description></item><item><title>Console virsh</title><link>https://www.reslinger.net/2014/12/console-virsh/</link><pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate><guid>https://www.reslinger.net/2014/12/console-virsh/</guid><description>&lt;p>Bonjour,&lt;/p>
&lt;p>Aujourd&amp;rsquo;hui, rien de passionnant, juste un petit mémo pour l&amp;rsquo;entrer dans une machine virtuelle pilotée par libvirt, mais surtout le raccourcis pour en ressortir.&lt;/p>
&lt;p>Pour entrer :&lt;/p>
&lt;pre>&lt;code>virsh console VM
&lt;/code>&lt;/pre>
&lt;p>Pour sortir&lt;/p>
&lt;pre>&lt;code>Ctrl + ]
&lt;/code>&lt;/pre>
&lt;p>Bien sur, il faut que le système invité soit configuré pour avoir une console sur le port série.&lt;/p></description></item><item><title>OpenVZ sur une RedHat 6</title><link>https://www.reslinger.net/2012/06/openvz-sur-une-redhat-6/</link><pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.reslinger.net/2012/06/openvz-sur-une-redhat-6/</guid><description>&lt;p>Bonjour tout le monde,&lt;/p>
&lt;p>Aujourd&amp;rsquo;hui, je vous propose de mettre en place un système de virtualisation utilisable sur tout type de matériel. En fait, dans notre cas du jour, il ne s&amp;rsquo;agit pas exactement de virtualisation mais plutôt de conteneur. L&amp;rsquo;avantage, c&amp;rsquo;est que ça fonctionne sur des machines qui n&amp;rsquo;ont pas forcément les instructions de virtualisation matériel. Pour ceux qui ne savent pas ce qu&amp;rsquo;est un conteneur (dans ce contexte), je vais faire un petit rappel.&lt;/p>
&lt;p>Le conteneur permet de faire des machines virtuelles, mais celles ci n&amp;rsquo;auront pas un espace complet réservé comme sur d&amp;rsquo;autre système de virtualisation car pour le système hôte et les invités, il s&amp;rsquo;agit du même noyau. Cela implique donc différente chose, à commencer par des performance élevée car il y a moins d&amp;rsquo;étape entre l&amp;rsquo;application d&amp;rsquo;une machine virtuelle et le matériel (disque, mémoire, cpu, &amp;hellip;). En contre parti, comme on a qu&amp;rsquo;un seul noyau, les invités sont donc du même type que l&amp;rsquo;hôte (Linux &amp;ndash; Linux, Windows &amp;ndash; Windows).&lt;/p>
&lt;p>Ici, nous ne verrons que la parti Linux. Le projet que nous allons utiliser s’appelle OpenVZ. Bien sûr, il y en a d&amp;rsquo;autre qui existe.&lt;/p>
&lt;p>Nôtre système hôte sera un clone d&amp;rsquo;une RedHat 6 (Scientific Linux 6).&lt;/p>
&lt;p>L&amp;rsquo;installation sur ce genre de système est vraiment très simple.&lt;/p>
&lt;p>Récupérez en premier la définition du dépôt :&lt;/p>
&lt;pre>&lt;code>cd /etc/yum.repos.d &amp;amp;&amp;amp; wget http://download.openvz.org/openvz.repo &amp;amp;&amp;amp; \
rpm --import http://download.openvz.org/RPM-GPG-Key-OpenVZ
&lt;/code>&lt;/pre>
&lt;p>Ensuite, modifier le fichier openvz.repo pour désactiver le dépot redhat 5 et activer celui de la redhat 6.&lt;/p>
&lt;p>Enfin, installez le kernel:&lt;/p>
&lt;pre>&lt;code>yum install vzkernel-firmware vzkernel vzctl vzquota
&lt;/code>&lt;/pre>
&lt;p>Pour que OpenVZ soit fonctionnel, il reste juste un peu de configuration. Désactiver SELinux (/etc/selinux/config) et mettez dans le fichier /etc/sysctl.conf ce qui suit:&lt;/p>
&lt;pre>&lt;code># On Hardware Node we generally need
# packet forwarding enabled and proxy arp disabled
net.ipv4.ip_forward = 1
net.ipv6.conf.default.forwarding = 1
net.ipv6.conf.all.forwarding = 1
net.ipv4.conf.default.proxy_arp = 0
# Enables source route verification
net.ipv4.conf.all.rp_filter = 1
# Enables the magic-sysrq key
kernel.sysrq = 1
# We do not want all our interfaces to send redirects
net.ipv4.conf.default.send_redirects = 1
net.ipv4.conf.all.send_redirects = 0
&lt;/code>&lt;/pre>
&lt;p>Après un redémarrage sur le nouveau noyau, vous voilà prêt à créer et démarrer vos machines virtuelles.&lt;/p></description></item></channel></rss>